/*! @page auto_reg Automatic Registration

Manak offers auto case and suite registation with a user friendly API. Auto 
registration can be done anywhere where manak.hpp is included. It cannot be 
inside any class or a function but it can be inside a namespace.

@section auto_reg_sbm Auto Registration With Simple Module

Simplest auto benchmark case registration -

@code
#define MANAK_SIMPLE_MODULE bench
#define MANAK_AUTO_MAIN
#define MANAK_INIT

#include <manak/manak.hpp>

MANAK_AUTO_BENCHMARK_CASE(B1)
{
  Code;
}

@endcode

Any auto registration registers the case or suite to the current suite. When no 
suite is set the current suite is set to master suite. So in the example above 
'MANAK_AUTO_BENCHMARK_CASE' will register 'B1' to master suite. 

When iteration, tolerance or success percentage is not specified for any 
benchmark case the default will be used. See @ref set_env_mdi, @ref set_env_mdt 
and @ref set_env_mdsp for more details.

The library name is taken as default library name in the simple module. Check out 
@ref ... for how to set default library name of simple module. 

@subsection auto_reg_sbm_smacr Simple Module Auto Case Registration Macros

@subsection auto_reg_sbm1 MANAK_AUTO_BENCHMARK_CASE_TIS
Creates a benchmark case with name, tolerance, iterations and success percentage,
and registers it under the current suite.

@code
MANAK_AUTO_BENCHMARK_CASE_TIS(B1, 10, 50, 90)
{
  Code;
}
@endcode

@subsection auto_reg_sbm2 MANAK_AUTO_BENCHMARK_CASE_TI
Creates a benchmark case with name, tolerance and iterations, and registers it 
under the current suite. The success percentage is taken as the defaut value.

@code
MANAK_AUTO_BENCHMARK_CASE_TI(B1, 10, 50)
{
  Code;
}
@endcode

@subsection auto_reg_sbm3 MANAK_AUTO_BENCHMARK_CASE_IS
Creates a benchmark case with name, iterations and success percentage, and 
registers it under the current suite. The tolerance is taken as the default value.

@code
MANAK_AUTO_BENCHMARK_CASE_IS(B1, 10, 90)
{
  Code;
}
@endcode

@subsection auto_reg_sbm4 MANAK_AUTO_BENCHMARK_CASE_I
Creates benchmark case with name and iterations, and registers it to the 
current benchmark suite. The tolerance and success percenatge is taken as
default.

@code
MANAK_AUTO_BENCHMARK_CASE_I(B1, 10)
{
  Code;
}
@endcode

@subsection auto_reg_sbm5 MANAK_AUTO_BENCHMARK_CASE_T
Creates benchmark case with name and tolerance, and registers it to the 
current benchmark suite. The value of iterations and success percentage is taken
to be default.

@code
MANAK_AUTO_BENCHMARK_CASE_T(B1, 50)
{
  Code;
}
@endcode

@subsection auto_reg_sbm6 MANAK_AUTO_BENCHMARK_CASE
Creates benchmark case with name, and registers it to the current benchmark suite.
Iterations, tolerance and success percentage for the benchmark case are taken 
to be defaults.

@subsection auto_reg_sbm7 MANAK_ADD_CASE
'MANAK_ADD_CASE' can be used to register manually generated benchmark case.
This is especially useful when written function needs to be added as benchmark 
case.

@code
#define MANAK_SIMPLE_MODULE bench
#define MANAK_AUTO_MAIN
#define MANAK_INIT 

#include <manak/manak.hpp>

int fun()
{
  Code to benchmark;
}

MANAK_ADD_case(MANAK_BENCHMARK_CASE(B1, fun));
@endcode

'MANAK_BENCHMARK_CASE' is a directive for manual registration. For more such 
directives see @ref man_reg.

The function to be registered must have no parameters. The function with 
parameters can used to generate parametrized benchmark cases. See 
@ref p_bench for more information. Also see @ref use_afr for registration of
complex functions such as overloaded functions, template functions and 
class member functions.

@subsection auto_reg_sbm_smasr Simple Module Auto Suite Registration Macros

@subsection auto_reg_sbm8 MANAK_AUTO_SUITE
Creates a new benchmarking suite with given name and registers it to the 
current benchmarking suite. It also sets the newly generated benchmarking suite
as the current suite.

@code
#define MANAK_SIMPLE_MODULE bench
#define MANAK_AUTO_MAIN
#define MANAK_INIT

#include <manak/manak.hpp>

MANAK_AUTO_SUITE(Suite1);

MANAK_AUTO_BENCHMARK_CASE(B1)
{
  Code;
}
@endcode

In the above example 'Suite1' will be registered under master suite and 'B1' will
be registered under 'Suite1'.

@subsection auto_reg_sbm9 MANAK_AUTO_SUITE_END
Sets the current benchmark suite to the parent of current of benchmark suite.

@code
#define MANAK_SIMPLE_MODULE bench
#define MANAK_AUTO_MAIN
#define MANAK_INIT

#include <manak/manak.hpp>

MANAK_AUTO_SUITE(Suite1);

MANAK_AUTO_BENCHMARK_CASE(B1)
{
  Code;
}

MANAK_AUTO_SUITE_END();

MANAK_AUTO_BENCHMARK_CASE(B2)
{
  Code;
} 
@endcode

In the above example 'B1' will be registered under 'Suite1' but 'B2' will
be registered under master suite.

@subsection auto_reg_sbm_ Simple Module Auto Parametrized Benchmark Case Registration

@subsection auto_reg_sbm10 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_TIS
Creates a parametrized benchmark case with name, function, tolerance, iterations and
success percentage. To register use 'MANAK_ADD_CASE'.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_TIS(ForLoops, fun, 10 50, 90)->AddArgs(1000)->AddArgs(2000));
@endcode

@subsection auto_reg_sbm11 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_TI
Creates a parametrized benchmark case with name, function, tolerance and iterations. 
To register use 'MANAK_ADD_CASE'. The value of success percentage is taken as 
constant.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_TI(ForLoops, fun)->AddArgs(1000)->AddArgs(2000));
@endcode

@subsection auto_reg_sbm12 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_IS
Creates a parametrized benchmark case with name, function, iterations and success percentage. 
To register use 'MANAK_ADD_CASE'. The value of tolerance is taken as constant.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_IS(ForLoops, fun, 10, 90)->AddArgs(1000)->AddArgs(2000));
@endcode

@subsection auto_reg_sbm13 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_I
Creates a parametrized benchmark case with name, function and iterations. 
To register use 'MANAK_ADD_CASE'. The values of tolerance and success percentage 
are taken as constant.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_I(ForLoops, fun, 10)->AddArgs(1000)->AddArgs(2000));
@endcode

@subsection auto_reg_sbm14 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_T
Creates a parametrized benchmark case with name, function and tolerance. 
To register use 'MANAK_ADD_CASE'. The values of iterations and success percentage
are taken as constant.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE_I(ForLoops, fun, 10)->AddArgs(1000)->AddArgs(2000));
@endcode

@subsection auto_reg_sbm15 MANAK_CREATE_BENCHMARK_WITH_TEMPLATE
Creates a parametrized benchmark case with name and function. To register use 'MANAK_ADD_CASE'. 
The values of tolerance, iterations and success percentage are taken as constant.

@code
int fun(size_t a)
{
  MEASURE
  (
    for(size_t i = 0;i < a;i++);
  )
}

MANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(ForLoops, fun)->AddArgs(1000)->AddArgs(2000));
@endcode

For more advance parametrized benchmark options check @ref p_bench.

@subsection auto_reg_sbm_smagr Simple Module Auto Group Registration Macros

@subsection auto_reg_sbm16 MANAK_AUTO_GROUP AND MANAK_AUTO_GROUP_END
'MANAK_AUTO_GROUP' starts a group and registers the cases inside to current suite.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

//! register cases

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm_smagbcr Simple Module Auto Group Benchmark Case Registration Macros

@subsection auto_reg_sbm17 MANAK_AUTO_GROUP_BENCHMARK_CASE_TIS
Create a benchmark case with name, tolerance, iterations and success percentage, 
and registers it automatically to the current group.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE_TIS("ForLoops", 10, 50, 90)
{

}

MANAK_GROUP_END();
@endcode

@subsection auto_reg_sbm18 MANAK_AUTO_GROUP_BENCHMARK_CASE_TI
Create a benchmark case with name, tolerance and iterations, 
and registers it automatically to the current group. The value of success percentage
is taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE_TI("ForLoops", 10, 50)
{

}

MANAK_GROUP_END();
@endcode

@subsection auto_reg_sbm19 MANAK_AUTO_GROUP_BENCHMARK_CASE_IS
Create a benchmark case with name, iterations and success percentage,
and registers it automatically to the current group. The value of tolerance
is taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE_IS("ForLoops", 10, 50)
{

}

MANAK_GROUP_END();
@endcode

@subsection auto_reg_sbm20 MANAK_AUTO_GROUP_BENCHMARK_CASE_I
Create a benchmark case with name and iterations,
and registers it automatically to the current group. The values of tolerance
and success percentage are taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE_I("ForLoops", 10)
{

}

MANAK_GROUP_END();
@endcode

@subsection auto_reg_sbm21 MANAK_AUTO_GROUP_BENCHMARK_CASE_T
Create a benchmark case with name and tolerance,
and registers it automatically to the current group. The values of iterations
and success percentage are taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE_T("ForLoops", 10)
{

}

MANAK_GROUP_END();
@endcode

@subsection auto_reg_sbm22 MANAK_AUTO_GROUP_BENCHMARK_CASE
Create a benchmark case with name, and registers it automatically to the current 
group. The values of tolerance, iterations and success percentage are taken as 
default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

MANAK_AUTO_GROUP_BENCHMARK_CASE("ForLoops")
{

}

MANAK_GROUP_END();
@endcode

For tutorial on manak group check out @ref ...

@subsection auto_reg_sbm23 MANAK_ADD_TO_GROUP
Registers the given case to the current group. 

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun()
{

}

MANAK_ADD_TO_GROUP(MANAK_GROUP_BENCHMARK_CASE("ForLoops", fun));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_smagpbcr Simple Module Auto Group Parametrized Benchmark Case Registration Macros

@subsection auto_reg_sbm24 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_TIS
Creates a parametrized benchmark case with name, function, tolerance, iterations
and success percentage. Use 'MANAK_ADD_TO_GROUP' to register it to the current
group.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_TIS("ForLoops", fun, 1, 50, 90)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm25 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_TI
Creates a parametrized benchmark case with name, function, tolerance and iterations. 
Use 'MANAK_ADD_TO_GROUP' to register it to the current group. The value of the 
success percentage is taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_TI("ForLoops", fun, 1, 50)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm26 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_IS
Creates a parametrized benchmark case with name, function, iterations
and success percentage. Use 'MANAK_ADD_TO_GROUP' to register it to the current
group. The value of tolerance is taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_IS("ForLoops", fun, 1, 50)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm27 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_I
Creates a parametrized benchmark case with name, function and iterations. 
Use 'MANAK_ADD_TO_GROUP' to register it to the current group. The values of 
tolerance and success percentage are taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_I("ForLoops", fun, 1)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm28 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_T
Creates a parametrized benchmark case with name, function and tolerance. 
Use 'MANAK_ADD_TO_GROUP' to register it to the current group. The values of 
iterations and success percentage are taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE_T("ForLoops", fun, 1)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

@subsection auto_reg_sbm29 MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE
Creates a parametrized benchmark case with name and function. 
Use 'MANAK_ADD_TO_GROUP' to register it to the current group. The values of 
tolerance, iterations and success percentage are taken as default.

@code
MANAK_AUTO_GROUP();

GINIT()
{

}

void fun(size_t a)
{

}

MANAK_ADD_TO_GROUP(MANAK_CREATE_GROUP_BENCHMARK_WITH_TEMPLATE("ForLoops", fun)->AddArgs(100));

MANAK_AUTO_GROUP_END();
@endcode

For example on simple module auto registration check @ref s_mod_ar_ex.

@section auto_reg_bm Auto Registration With Normal Module

Simplest auto benchmark case registration -

@code
#include <iostream>

#define MANAK_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN

#include <manak/manak.hpp>

MANAK_AUTO_BENCHMARK_CASE(B1, lib1)
{
  Code;
}
@endcode

Any auto registration registers the case or suite to the current benchmark suite.
When no benchmark suite is set the current benchmark suite is set to master suite.
So in the example above 'MANAK_AUTO_BENCHMARK_CASE' will register 'B1' to master
suite. 

When iteration or tolerance is not specified for any benchmark case the default 
will be used. See @ref set_env_mdi and @ref set_env_mdt for more details.

See @ref comp_nm to understand the comparison framework in normal module.

@subsection auto_reg_bm1 MANAK_AUTO_BENCHMARK_CASE
Creates benchmark case with name and library, and registers it to the current 
benchmark suite.Iterations and tolerance for the benchmark case are taken to be 
defaults.

@subsection auto_reg_bm2 MANAK_AUTO_BENCHMARK_CASE_I
Creates benchmark case with name, library and iterations, and registers it to the 
current benchmark suite. 

@code
MANAK_AUTO_BENCHMARK_CASE_I(B1, lib1, 10)
{
  Code;
}
@endcode

@subsection auto_reg_bm3 MANAK_AUTO_BENCHMARK_CASE_T
Creates benchmark case with name, library and tolerance, and registers it to the 
current benchmark suite. 

@code
MANAK_AUTO_BENCHMARK_CASE_T(B1, lib1, 50)
{
  Code;
}
@endcode

@subsection auto_reg_bm4 MANAK_AUTO_BENCHMARK_CASE_IT
Creates benchmark case with name, library, iterations and tolerance, and 
registers it to the current benchmark suite. 

@code
MANAK_AUTO_BENCHMARK_CASE_IT(B1, lib1, 10, 50)
{
  Code;
}
@endcode

@subsection auto_reg_bm8 MANAK_ADD_BENCHMARK
'MANAK_ADD_BENCHMARK' can be used to register manually generated benchmark case.
This is especially useful when written function needs to be added as benchmark 
case.

@code
#include <iostream>

#define MANAK_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN 

#include <manak/manak.hpp>

int fun()
{
  Code to benchmark;
}

MANAK_ADD_BENCHMARK(MANAK_BENCHMARK_CASE(B1, lib1, fun));
@endcode

'MANAK_BENCHMARK_CASE' is a directive for manual registration. For more such 
directives see @ref man_reg.

The function to be registered must have no parameters. The function with 
parameters can used to generate parametrized benchmark cases. See 
@ref p_bench for more information. Also see @ref use_afr for registration of
complex functions such as overloaded functions, template functions and 
class member functions.

@subsection auto_reg_bm5 MANAK_AUTO_BENCHMARK_SUITE
Creates a new benchmarking suite with given name and registers it to the 
current benchmarking suite. It also sets the newly generated benchmarking suite
as the current suite.

@code
#include <iostream>

#define MANAK_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN

#include <manak/manak.hpp>

MANAK_AUTO_BENCHMARK_SUITE(Suite1);

MANAK_AUTO_BENCHMARK_CASE(B1, lib1)
{
  Code;
}
@endcode

In the above example 'Suite1' will be registered under master suite and 'B1' will
be registered under 'Suite1'.

@subsection auto_reg_bm6 MANAK_AUTO_BENCHMARK_END
Sets the current benchmark suite to the parent of current of benchmark suite.

@code
#include <iostream>

#define MANAK_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN

#include <manak/manak.hpp>

MANAK_AUTO_BENCHMARK_SUITE(Suite1);

MANAK_AUTO_BENCHMARK_CASE(B1, lib1)
{
  Code;
}

MANAK_AUTO_BENCHMARK_SUITE_END();

MANAK_AUTO_BENCHMARK_CASE(B2, lib2)
{
  Code;
} 
@endcode

In the above example 'B1' will be registered under 'Suite1' but 'B2' will
be registered under master suite.

@subsection auto_reg_bm7 Parametrized Benchmark cases
Parametrized benchmark cases can be registered with macro 'MANAK_ADD_BENCHMARK'.

@code
#include <iostream>

#define MANAK_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN

#include <manak/manak.hpp>

int fun(size_t a)
{
  for(size_t i = 0;i < a;i++);
}

MANAK_ADD_BENCHMARK(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(ForLoops, lib1, fun)->AddArgs((size_t)1000)->AddArgs((size_t)2000));
@endcode

For more advance parametrized benchmark options check @ref p_bench.

For example on normal module auto registration check @ref n_mod_ar_ex.
*/
