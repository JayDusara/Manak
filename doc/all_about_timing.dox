/*! @page all_time All About Timing

Let us start by timing the simplest function.

@code
MANAK_AUTO_BENCHMARK_CASE(B1)
{
  Code;
}
@endcode

In this case the entire function call will be timed. Sometimes the Code to 
measure is more time sensetive. The measue code may require some other code for
setup or tear down. For this Manak provides 'Measure' macro.

@code
MANAK_AUTO_BENCHMARK_CASE(B1)
{
  SetUp Code;
  
  Measure
  (
    Code
  )
  
  TearDown Code;
  
  Measure
  (
    Code;
  )
  
  TearDown Code;
}
@endcode

In this case only the code inside Measure blocks will be timed. There can be any
number of 'Measure' blocks inside a benchmark case. The time of all the 'Measure'
blocks will be sumed. 

All the benchmarks cases run for certain number of iterations and the final time
is taken as the average of all the iterations. If number of iterations are not 
specified for any benchmark case default is used(which is 10). Check out 
@ref set_env_mdi for setting default number of iterations. Sometimes the setup
code or the tear down is very expensive in terms of time and is only required 
to be executed once. Even with 'Measure' blocks, setup and teardown code is 
executed every iteration. This problem can be solved with 'Repeat' macro.

@code
MANAK_AUTO_BENCHMARK_CASE(B1)
{
  SetUp Code;
  
  Repeat
  (
    Measure
    (
      Code
    )
  
    Code;
  
    Measure
    (
      Code;
    )
  )
  TearDown Code;
}
@endcode

With 'Repeat' block, only the code inside the 'Repeat' block is executed for number
of iterations. Any code outside of 'Repeat' block will not be timed, even
'Measure' blocks. If there are multiple 'Repeat' blocks the only the last
'Repeat' block will be timed.

'Measure' and 'Repeat' blocks can also be used in manually added benchmark cases.
For example - 

@code
int fun(int a, int b)
{
  Code;

  Repeat
  (
    Measure
    (
      Code to measure;
    )
  )
}

MANAK_ADD_BENCHMARK(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(B1, fun)->AddArgs(0,0)...);
@endcode
*/
