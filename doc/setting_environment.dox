/*! @page set_env Setting Environment


@section set_env_smt Setting module type

Manak offers 2 module types, simple and normal. 

@subsection set_env_msbm MANAK_SIMPLE_BENCHMARK_MODULE
Simple module can be set by defining 'MANAK_SIMPLE_BENCHMARK_MODULE' to 
desired name. By setting this module only one library will be registered with 
name "base_library". All the auto cases will be registered under this library. 
To change the name of this library check out @ref set_env_mbln. For macros 
available in this module check out @ref s_mod

@subsection set_env_mbm MANAK_BENCHMARK_MODULE
Normak benchmark module can be set by defining 'MANAK_BENCHMARK_MODULE' to 
desired name. This module supports multiple libraries. When this module is used 
each benchmark case has to assigned to a library. For macros available in this
module check out @ref n_mod

@section set_env_smft Set main function type

@subsection set_env_mabm MANAK_AUTO_BENCHMARK_MAIN
By defining 'MANAK_AUTO_BENCHMARK_MAIN', manak will create a main function for 
you. This main function will initialize all the cases and run them. 

@subsection set_env_mcmf Manually creating main function
You can create your own main function and still run all the benchmarks by
calling function manak::manak_benchmarking_main. The function accepts 
benchmark initialization function as the first argument. Check out 
@ref set_env_sbif for more information on benchmark initialization function. 
Init function can be manually generated for registering benchmark cases manually.
In any case MANAK_INIT_FUNCTION will be set to the current init function. 

@code
#include <iostream>

#define MANAK_SIMPLE_BENCHMARK_MODULE bench

#include <manak/manak.hpp>

int main(int argc, char* argv[])
{
  manak::manak_benchmarking_main(MANAK_INIT_FUNCTION, argc, argv);
}
@endcode
 

@section set_env_sbif Set benchmark initialization function
The deafult initialization function is manak::init_benchmarking_module. This 
initialization function set all the primary environment variables. To register
benchmarking cases manually you need to create and register your own benchmark
initialization function. This can be done by setting MANAK_ALTERNATE_INIT_FUNCTION
to the desired name. The initialization function should return bool, the success
state. This function should be available in the namespace at the time main is 
defined. This initilaization function should call manak::init_benchmarking_module
for setting primary variables. For example -

@code
#include <iostream>

bool bench_init();

#define MANAK_SIMPLE_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN
#define MANAK_ALTERNATE_INIT_FUNCTION bench_init

#include <manak/manak.hpp>

bool bench_init()
{
  if(!manak::init_benchmarking_module())
    exit(1);
  
  Manual case registration;
  return true;
}
@endcode

For guide on manual case registration check out @ref man_reg

@section set_env_soo Set Output Options

@subsection set_env_sro Setting Redirection Options
All the output to the standard output is redirected predefined redirection stream 
while running any benchmark case. By default this redirection is done to file
'benchmark_log.txt'. To chnage the filename of of this default redirection file
set 'MANAK_REDIRECTION_FILENAME' to desired value. 

@code
#include <iostream>

#define MANAK_SIMPLE_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN
#define MANAK_REDIRECTION_FILENAME logs.txt

#include <manak/manak.hpp>
@endcode

Redirection can also be done to the already existing stream. 
Set 'MANAK_BENCHMARK_REDIRECTION_STREAM' to stream's buffer.

@code
#include <iostream>

#define MANAK_SIMPLE_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN
#define MANAK_BENCHMARK_REDIRECTION_STREAM std::cout.rdbuf()

#include <manak/manak.hpp>
@endcode

@subsection set_env_soof Setting Options For Output File
By default the results of the benchmarks are saved to file 'benchmark_stat.txt'.
This default filename can be changed by setting 'MANAK_DEFAULT_OUT_FILENAME' to 
desired value.

@code
#include <iostream>

#define MANAK_SIMPLE_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN
#define MANAK_DEFAULT_OUT_FILENAME out.txt

#include <manak/manak.hpp>
@endcode

The default generated output shows average time of all iterations. To also see 
min and max values define MANAK_SHOW_MIN_MAX.

@code
#include <iostream>

#define MANAK_SIMPLE_BENCHMARK_MODULE bench
#define MANAK_AUTO_BENCHMARK_MAIN
#define MANAK_SHOW_MIN_MAX

#include <manak/manak.hpp>

MANAK_AUTO_BENCHMARK_CASE(ForLoop)
{
  for(size_t i = 0;i < 1000;i++);
}
@endcode

The output generated by this code will look like this -

@code
######################################################################
#  Manak C++ Benchmarking Library                                    #
#  Version master.0.0                                                #
#  Created at Nov 13 22:41:53 2014                                   #
######################################################################

       Case Name              base_library        

ForLoop                       3.2[3:4]            
@endcode

The values given in brackets stand for [min:max].

@section set_env_oev Other Environment Variables

@subsection set_env_mbln MANAK_BASE_LIBRARY_NAME

Set MANAK_BASE_LIBRARY_NAME to desired name to change the name of singleton
library in 'MANAK_SIMPLE_BENCHMARK_MODULE'.

@code
#define MANAK_BASE_LIBRARY_NAME <name>
@endcode

@subsection set_env_mdi MANAK_DEFAULT_ITERATIONS

If number of iterations is not specified for any benchmark case the default 
number of iterations are used. The default can be chnaged by setting 
'MANAK_DEFAULT_ITERATIONS' to the desired value. 

@code
#define MANAK_DEFAULT_ITERATIONS <value in integer>
@endcode

@subsection set_env_mdt MANAK_DEFAULT_TOLERANCE

If tolerance is not specified for any benchmark case the default is used. The 
default can be chnaged by setting 'MANAK_DEFAULT_TOLERANCE' to desired value. 
The measure of tolerance is microseconds. To understand use of tolerance see ...

@code
#define MANAK_DEFAULT_TOLERANCE <value in microseconds>
@endcode
*/
