{"name":"Manak","tagline":"C++ Unit Benchmarking Library","body":"#Manak: C++ Unit Benchmarking Library\r\n\r\n##Introduction\r\n\r\nManak unit benchmarking library provides both easy to use and flexible solution\r\nto the problem of benchmarking. Unit benchmarking comes handy for projects \r\nwith continuous integration. With manak you can save the benchmarks of your\r\ncurrent implementation and compare them against the later ones. You can also \r\nbenchmark your library against any other library. Manak offers a hierarchical \r\nstructure similar to BOOST Unit Testing and generates a easy to read output file.\r\nManak is header only library and highly uses c++11 features. \r\n\r\n##How To Install\r\n\r\n###For Linux\r\n1. Create directory build.\r\n2. cd into build and run command _**cmake ../**_\r\n3. For building from source run command _**make**_, this will create executable kif\r\n   and flatten inside bin.\r\n4. To install run command _**sudo make install**_\r\n\r\n###For Windows\r\nManak does not have any external dependency. Hence you can use the CMake GUI to\r\ninstall the header files to your environment. Or you can simple copy the folder \r\nnamed **manak**(_./src/manak_) to the include folder of your IDE.\r\n\r\n##Quick Guide\r\n\r\nA simple benchmarking case is given below -   \r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(ForLoops)\r\n{\r\n  for(size_t i = 0;i < 10000;i++);\r\n}\r\n```\r\nThis will create a benchmark case with name 'ForLoops' which will time the \r\nfo loop given inside. The default iterations are 10. Run the genrated executable \r\nby passing '-h' for more options.   \r\n\r\nThe ouput will be written to file 'benchmark_stat.txt'.Here the function code \r\ninside the auo case will be timed. For More time sensetive code you can use \r\n'Measure' macro. For example -  \r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(ForLoops)\r\n{\r\n  Setup code;\r\n  \r\n  Measure\r\n  (\r\n    Code to measure;\r\n  )\r\n  \r\n  More code...\r\n}\r\n```\r\n\r\nThis usage will only measure the code inside the measure block. There can be \r\nmore that one measure blocks.\r\n\r\nTo add already existing function to benchmarking -\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nint fun()\r\n{\r\n  Code;\r\n}\r\n\r\nMANAK_ADD_BENCHMARK(MANAK_BENCHMARK_CASE(B1, fun));\r\n```\r\nRemember Measure blocks can also be used in functions such as 'fun' here.\r\n\r\nTo create benchmark suite -\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_SUITE(Suite1);\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B1)\r\n{\r\n  for(size_t i = 0;i < 1000;i++);\r\n}\r\n```\r\n\r\nTo compare 2 or more libraries against each other -\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B1, lib1)\r\n{\r\n  for(size_t i = 0;i < 1000;i++);\r\n}\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B2, lib2)\r\n{\r\n  for(size_t i = 0;i < 10000;i++);\r\n}\r\n```\r\n\r\nFunctions with arguments can be used as templates. Templates are useful when \r\nthe same function is used for benchmarking with different parameters.\r\nConsider the next example -\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nint fun(int a, int b)\r\n{\r\n  Code\r\n}\r\n\r\nMANAK_ADD_BENCHMARK(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(B1, fun)->AddArgs(0,0)->AddArgs(1,1)...);\r\n```\r\n\r\nHere the banechmark case will contain many unnamed cases. When number of argument\r\nsets is large you can add all the argument sets by a function. The function must\r\nreturn list of tuples.\r\nFor example -\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <tuple>\r\n#include <list>\r\n\r\n#define MANAK_SIMPLE_BENCHMARK_MODULE lib\r\n#define MANAK_AUTO_BENCHMARK_MAIN\r\n\r\n#include <manak/manak.hpp>\r\n\r\nusing namespace std;\r\n\r\nint fun(int a, int b)\r\n{\r\n  Code;\r\n}\r\n\r\nlist<tuple<int, int>> get_args()\r\n{\r\n  list<tuple<int, int>> out;\r\n  for(size_t i = 0;i < 100;i++)\r\n    out.emplace_back(i, i);\r\n  return out;\r\n}\r\n\r\nMANAK_ADD_BENCHMARK(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(B1, fun)->AddCustomArgs(get_args));\r\n```\r\n\r\nThe genrated timing can be saved and added for comparison for later runs. For\r\nmore options check out the Complete Guide.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}