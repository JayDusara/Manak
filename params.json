{"name":"Manak","tagline":"C++ Unit Benchmarking and Testing Library","body":"#Manak: C++ Unit Benchmarking and Testing Library\r\n\r\n###Latest Stable Release: [Manak 2.0.0](https://github.com/Manak-org/Manak/archive/v2.0.0.zip)\r\n\r\n###Contact Us:\r\n - Join IRC channel #manak on Freenode\r\n - Get in touch with Gitter\r\n - Or you can just drop a mail on sumedhghaisas@gmail.com\r\n\r\n##Introduction\r\n\r\nManak unit benchmarking and testing library provides both easy to use and flexible \r\nAPI. As both benchmarking and testing framework are combined into one, Manak comes\r\nhandy for projects with continuous integration. Manak implements xUnit achitecture\r\nand improves upon it.\r\n\r\nManak offers following unique features - \r\n - Timing and testing both in a single unit\r\n - Comparison between different implementations and changing implementation(for judging improvements)\r\n - Support for 'Groups' to remove code redundancy and improve runtime\r\n - Implements framework for randomized tests\r\n - Complete regular expression support for running specific cases\r\n - Supports HTML output generation, also supports multiple output generation\r\n - Supports both Static and Dynamic Linkage\r\n - Implemented in C++11 and scalable to C++14\r\n - No external dependency(Specially for Windows Users :D)\r\n \r\n##The Idea Behind Manak\r\n'Manak' in Sanskrit means standard. Manak aims at a framework for standardization\r\nof code. Currently Manak combines the 2 most important requirements for any C++\r\nproject, testing and benchmarking. Manak understands that benchmarking is not just \r\ntiming, it must also be supported with a rich comparison framework. And this is \r\nnot the end. The next milestone is to integrate the memory mesurement tools. With \r\nproper steps, we will build a one stop solution for all continuous integration \r\nissues. \r\n \r\n###Check out [Wiki](https://github.com/Manak-org/Manak/wiki) for User Guide.\r\n\r\n###Check out [Developer's Guide](http://Manak-org.github.io/Manak/html/index.html).\r\n\r\n###Check out [GSOC 2015 Ideas Page](https://github.com/Manak-org/Manak/wiki/Google-Summer-of-Code-2015---Ideas-Page)\r\n\r\n##How To Install\r\n\r\n1. Create directory build.\r\n2. cd into build and run command _**cmake ../**_\r\n3. For building from source run command _**make**_, this will create executable kif\r\n   and flatten inside bin.\r\n4. To install run command _**sudo make install**_\r\n\r\nOf course, all this is unneccessary if you want to use only static linkage. \r\nJust copy the src/manak folder to the default search path and you are done.\r\n\r\n##An Overview\r\n\r\nA simple case is given below -   \r\n\r\n```cpp\r\n#define MANAK_SIMPLE_MODULE mod1\r\n#define MANAK_AUTO_MAIN\r\n#define MANAK_INIT\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B1)\r\n{\r\n  MEASURE\r\n  (\r\n    for(size_t i = 0;i < 10000;i++);\r\n  )\r\n  \r\n  TEST\r\n  (\r\n    MANAK_ASSERT_TRUE(1 == 1);\r\n  )\r\n}\r\n```\r\nThis will create a benchmark case with name 'B1' which will time the \r\nfor loop given inside 'MEASURE' and run the tests given inside 'TEST' block. \r\nThe case is run for certain number of iterations, the default is 10. The iterations\r\nhelp to gt average score and also for randomized tests, where sometimes x out of\r\nn times the test has to be passed.  \r\n\r\nThe ouput will be written to file 'benchmark_stat.html'. TThe output is easy to\r\nread and verbose. \r\n\r\n```cpp\r\n#define MANAK_MODULE mod1\r\n#define MANAK_AUTO_MAIN\r\n#define MANAK_INIT\r\n\r\n#include <manak/manak.hpp>\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B1, With10000)\r\n{\r\n  MEASURE\r\n  (\r\n    for(size_t i = 0;i < 10000;i++);\r\n  )\r\n  \r\n  TEST\r\n  (\r\n    MANAK_ASSERT_TRUE(1 == 1);\r\n  )\r\n}\r\n\r\nMANAK_AUTO_BENCHMARK_CASE(B1, With100000)\r\n{\r\n  MEASURE\r\n  (\r\n    for(size_t i = 0;i < 100000;i++);\r\n  )\r\n  \r\n  TEST\r\n  (\r\n    MANAK_ASSERT_TRUE(1 == 1);\r\n  )\r\n}\r\n```\r\n\r\nThe above code will measure the time taken by the loops and compare them against \r\neach other in the output. Observe that the case name is same and the second \r\nargument(the library name in Manak hierarchy) is different. \r\n\r\nSee that its a code redundancy. The solution is through Groups - \r\n\r\n```cpp\r\ntemplate<size_t index>\r\nMANAK_GROUP(TestGroup);\r\n\r\nsize_t iter;\r\nstd::string l_name;\r\n\r\nGINIT(size_t n, const std::string& str)\r\n{\r\n  iter = n;\r\n  name = str;\r\n}\r\n\r\nMANAK_AUTO_GROUP_BENHMARK_CASE(\"ForLoops\", l_name)\r\n{\r\n  MEASURE\r\n  (\r\n    for(size_t i = 0;i < iter;i++);\r\n  )\r\n}\r\n\r\nMANAK_AUTO_GROUP_BENCHMARK_CASE(\"Test\", \"Lib1\")\r\n{\r\n  //Can use iter and name here\r\n} \r\n\r\nMANAK_GROUP_END();\r\n\r\nMANAK_ADD_GROUP(TestGroup<1>, 1000, \"With1000\");\r\nMANAK_ADD_GROUP(TestGroup<2>, 10000, \"With10000\");\r\n```\r\n\r\nAnother important usgae of groups is that the cases inside can share variables.\r\nImagine that you are testing a variable which takes lot of time to create. \r\nSo rather than wasting time while creating it in each case create it in 'GINIT'\r\nand usage is freely inside the group. Groups act like c++ Classes. Example of\r\nthis is also shown in the above code.\r\n\r\nSometimes you don't want to compare the code against each other but time and test\r\na function with many different parameters. Maybe while regression testing.\r\nFor this parametrized benchmarks can be used.\r\n\r\n```cpp\r\nvoid fun(ize_t a, size_t b)\r\n{\r\n\r\n}\r\n\r\nMANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(B1, fun)->AddArgs(0, 0)->AddArgs(1, 1));\r\n```\r\n\r\nWhat if you want to test it against 100 set of parameters -\r\n\r\n```cpp\r\nstd::list<std::tuple<size_t, size_t>> GetArgs()\r\n{\r\n  std::list<std::tuple<size_t, size_t>> out;\r\n\r\n  for(size_t i = 0;i < 100;i++)\r\n    out.emplace_back(i, i);\r\n    \r\n  return out;\r\n}\r\n\r\nMANAK_ADD_CASE(MANAK_CREATE_BENCHMARK_WITH_TEMPLATE(B1, fun)->AddCustomArgs(GetArgs));\r\n```\r\n\r\nCheck out the the wiki for many more such features.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}